{"version":3,"file":"Tabs.story-b97d1b5c.js","sources":["../../src/components/Tabs/context.ts","../../src/components/Tabs/Tabs.tsx","../../src/components/Tabs/TabsList.tsx","../../src/components/Tabs/TabPanel.tsx","../../src/components/Tabs/Tab.tsx"],"sourcesContent":["import { createContext, useContext, KeyboardEvent, MouseEvent } from 'react';\n\nexport interface ITabContextValues {\n  key: string;\n  id: string;\n  role: string;\n  tabIndex: number;\n  onClick: (event: MouseEvent<HTMLDivElement>) => void;\n  onKeyDown: (event: KeyboardEvent<HTMLDivElement>) => void;\n  'aria-posinset': number;\n  'aria-selected': boolean;\n  'aria-controls': string;\n}\n\nexport interface ITabPanelContextValues {\n  role: string;\n  id: string;\n  'aria-labelledby': string;\n}\n\nexport interface TabListContextValues {\n  selected: number;\n  onTabChange: (index: number) => void;\n  tabsId: string;\n}\n\nexport const TabContext = createContext<ITabContextValues | null>(null);\nexport const TabPanelContext = createContext<ITabPanelContextValues | null>(null);\nexport const TabListContext = createContext<TabListContextValues | null>(null);\n\nexport const useTab = () => {\n  const tabData = useContext(TabContext);\n  if (tabData == null) {\n    throw Error('A Tab must have a TabList parent');\n  }\n\n  return tabData;\n};\n\nexport const useTabPanel = () => {\n  const tabPanelData = useContext(TabPanelContext);\n  if (tabPanelData == null) {\n    throw Error('A TabPanel must have a Tabs parent');\n  }\n\n  return tabPanelData;\n};\n\nexport const useTabList = () => {\n  const tabListData = useContext(TabListContext);\n  if (tabListData == null) {\n    throw Error('A TabList must have a Tabs parent');\n  }\n\n  return tabListData;\n};\n","import React, { FC, Children, ReactNode, useState, useMemo, useCallback } from 'react';\n\nimport { TabListContext, TabPanelContext } from './context';\n\nexport interface ITabsProps {\n  children: ReactNode;\n  id?: string;\n  testId?: string;\n}\n\nexport const Tabs: FC<ITabsProps> = ({ id = 'tab', children, testId }) => {\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const childrenArray = Children.toArray(children);\n  // with this API we expect the first child to be a list of tabs\n  // followed by a list of tab panels that correspond to those tabs\n  // the ordering is determined by the position of the elements\n  // that are passed in as children\n  const [tabList, ...tabPanels] = useMemo(() => childrenArray, [childrenArray]);\n\n  const onTabChange = useCallback((index: number) => {\n    setSelectedTabIndex(index);\n  }, []);\n\n  return (\n    <div id={id} data-testId={testId}>\n      <TabListContext.Provider value={{ selected: selectedTabIndex, onTabChange, tabsId: id }}>\n        {tabList}\n      </TabListContext.Provider>\n      <TabPanelContext.Provider\n        value={{\n          role: 'tabpanel',\n          id: `${id}-${selectedTabIndex}-tab`,\n          'aria-labelledby': `${id}-${selectedTabIndex}`,\n        }}\n      >\n        {tabPanels[selectedTabIndex]}\n      </TabPanelContext.Provider>\n    </div>\n  );\n};\n","import React, { FC, ReactNode, createRef, useCallback } from 'react';\n\nimport { TabContext, useTabList } from './context';\nimport './TabsList.scss';\n\nexport interface ITabsListProps {\n  children: ReactNode;\n}\n\nexport const TabsList: FC<ITabsListProps> = ({ children }) => {\n  // provided by top level Tabs component coming up next\n  const { tabsId, selected, onTabChange } = useTabList();\n\n  // store a reference to the DOM element so we can select via id\n  // and manage the focus states\n  const ref = createRef<HTMLDivElement>();\n\n  const selectTabByIndex = useCallback(\n    (index: number) => {\n      if (ref.current) {\n        const selectedTab = ref.current.querySelector(`[id=${tabsId}-${index}]`) as HTMLDivElement;\n        selectedTab?.focus();\n        onTabChange(index);\n      }\n    },\n    [onTabChange, ref, tabsId],\n  );\n\n  // we would handle keyboard events here\n  // things like selecting with left and right arrow keys\n  const onKeyDown = useCallback(() => {\n    // ...\n  }, []);\n\n  // .. some other stuff - again we're omitting styles etc\n\n  return (\n    <div role=\"tablist\" ref={ref} className=\"tab-list\">\n      {React.Children.map(children, (child, index) => {\n        const isSelected = index === selected;\n\n        return (\n          <TabContext.Provider\n            // (!) in real life this would need to be restructured\n            // (!) and memoized to use a stable references everywhere\n            value={{\n              key: `${tabsId}-${index}`,\n              id: `${tabsId}-${index}`,\n              role: 'tab',\n              'aria-posinset': index + 1,\n              'aria-selected': isSelected,\n              'aria-controls': `${tabsId}-${index}-tab`,\n              // managing focussability\n              tabIndex: isSelected ? 0 : -1,\n              onClick: () => selectTabByIndex(index),\n              onKeyDown,\n            }}\n          >\n            {child}\n          </TabContext.Provider>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { FC, ReactNode } from 'react';\n\nimport { useTabPanel } from './context';\nimport './TabPanel.scss';\n\nexport interface ITabPanelProps {\n  children: ReactNode;\n}\n\nexport const TabPanel: FC<ITabPanelProps> = ({ children }) => {\n  const tabPanelAttributes = useTabPanel();\n\n  return (\n    <div {...tabPanelAttributes} className=\"tab-panel\">\n      {children}\n    </div>\n  );\n};\n","import React, { FC, ReactNode } from 'react';\nimport cx from 'clsx';\n\nimport { useTab } from './context';\nimport './Tab.scss';\n\nexport interface ITabProps {\n  children: ReactNode;\n}\n\nexport const Tab: FC<ITabProps> = ({ children }) => {\n  const tabAttributes = useTab();\n\n  return (\n    <div {...tabAttributes} className={cx('tab', { 'tab--active': tabAttributes['aria-selected'] })}>\n      {children}\n    </div>\n  );\n};\n"],"names":["TabContext","createContext","TabPanelContext","TabListContext","useTab","tabData","useContext","useTabPanel","tabPanelData","useTabList","tabListData","Tabs","id","children","testId","selectedTabIndex","setSelectedTabIndex","useState","childrenArray","Children","tabList","tabPanels","useMemo","onTabChange","useCallback","index","jsxs","jsx","TabsList","tabsId","selected","ref","createRef","selectTabByIndex","selectedTab","onKeyDown","React","child","isSelected","TabPanel","tabPanelAttributes","Tab","tabAttributes","cx"],"mappings":"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"}